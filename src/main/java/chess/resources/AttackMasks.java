package chess.resources;

public class AttackMasks {
/*
THIS IS TOTALLY WRONG ...
    //      convention :
    //      16 17 ......
    //      8  9  10 11 12 13 14 15
    //      0  1   2  3  4  5  6  7

//    0 0 0 0 | 0 0 0 0
//    1 1 0 0 | 0 0 0 0
//    0 1 0 0 | 0 0 0 0
//    0x302 --> 0011 0000 0010
*/
    public static final long[] KING_MOVES_MASKS = {
            0x302L, 0x705L, 0xe0aL, 0x1c14L,
            0x3828L, 0x7050L, 0xe0a0L, 0xc040L,
            0x30203L, 0x70507L, 0xe0a0eL, 0x1c141cL,
            0x382838L, 0x705070L, 0xe0a0e0L, 0xc040c0L,
            0x3020300L, 0x7050700L, 0xe0a0e00L, 0x1c141c00L,
            0x38283800L, 0x70507000L, 0xe0a0e000L, 0xc040c000L,
            0x302030000L, 0x705070000L, 0xe0a0e0000L, 0x1c141c0000L,
            0x3828380000L, 0x7050700000L, 0xe0a0e00000L, 0xc040c00000L,
            0x30203000000L, 0x70507000000L, 0xe0a0e000000L, 0x1c141c000000L,
            0x382838000000L, 0x705070000000L, 0xe0a0e0000000L, 0xc040c0000000L,
            0x3020300000000L, 0x7050700000000L, 0xe0a0e00000000L, 0x1c141c00000000L,
            0x38283800000000L, 0x70507000000000L, 0xe0a0e000000000L, 0xc040c000000000L,
            0x302030000000000L, 0x705070000000000L, 0xe0a0e0000000000L, 0x1c141c0000000000L,
            0x3828380000000000L, 0x7050700000000000L, 0xe0a0e00000000000L, 0xc040c00000000000L,
            0x203000000000000L, 0x507000000000000L, 0xa0e000000000000L, 0x141c000000000000L,
            0x2838000000000000L, 0x5070000000000000L, 0xa0e0000000000000L, 0x40c0000000000000L
    };

    // A lookup table for knight move bitboards
    public static final long[] KNIGHT_MOVES_MASKS = {
            /*
            same convention as pawn
             */
            0x20400L, 0x50800L, 0xa1100L, 0x142200L,
            0x284400L, 0x508800L, 0xa01000L, 0x402000L,
            0x2040004L, 0x5080008L, 0xa110011L, 0x14220022L,
            0x28440044L, 0x50880088L, 0xa0100010L, 0x40200020L,
            0x204000402L, 0x508000805L, 0xa1100110aL, 0x1422002214L,
            0x2844004428L, 0x5088008850L, 0xa0100010a0L, 0x4020002040L,
            0x20400040200L, 0x50800080500L, 0xa1100110a00L, 0x142200221400L,
            0x284400442800L, 0x508800885000L, 0xa0100010a000L, 0x402000204000L,
            0x2040004020000L, 0x5080008050000L, 0xa1100110a0000L, 0x14220022140000L,
            0x28440044280000L, 0x50880088500000L, 0xa0100010a00000L, 0x40200020400000L,
            0x204000402000000L, 0x508000805000000L, 0xa1100110a000000L, 0x1422002214000000L,
            0x2844004428000000L, 0x5088008850000000L, 0xa0100010a0000000L, 0x4020002040000000L,
            0x400040200000000L, 0x800080500000000L, 0x1100110a00000000L, 0x2200221400000000L,
            0x4400442800000000L, 0x8800885000000000L, 0x100010a000000000L, 0x2000204000000000L,
            0x4020000000000L, 0x8050000000000L, 0x110a0000000000L, 0x22140000000000L,
            0x44280000000000L, 0x0088500000000000L, 0x0010a00000000000L, 0x20400000000000L
    };

    // A lookup table for white pawn move bitboards
    public static final long[] WHITE_PAWN_ATTACKS_MASKS = {
            /*
            15 14 13 12 11 10 9 8
            7   6  5  4  3  2 1 0
            */
            0x200L, 0x500L, 0xa00L, 0x1400L,
            0x2800L, 0x5000L, 0xa000L, 0x4000L,
            0x20000L, 0x50000L, 0xa0000L, 0x140000L,
            0x280000L, 0x500000L, 0xa00000L, 0x400000L,
            0x2000000L, 0x5000000L, 0xa000000L, 0x14000000L,
            0x28000000L, 0x50000000L, 0xa0000000L, 0x40000000L,
            0x200000000L, 0x500000000L, 0xa00000000L, 0x1400000000L,
            0x2800000000L, 0x5000000000L, 0xa000000000L, 0x4000000000L,
            0x20000000000L, 0x50000000000L, 0xa0000000000L, 0x140000000000L,
            0x280000000000L, 0x500000000000L, 0xa00000000000L, 0x400000000000L,
            0x2000000000000L, 0x5000000000000L, 0xa000000000000L, 0x14000000000000L,
            0x28000000000000L, 0x50000000000000L, 0xa0000000000000L, 0x40000000000000L,
            0x200000000000000L, 0x500000000000000L, 0xa00000000000000L, 0x1400000000000000L,
            0x2800000000000000L, 0x5000000000000000L, 0xa000000000000000L, 0x4000000000000000L,
            0x0L, 0x0L, 0x0L, 0x0L,
            0x0L, 0x0L, 0x0L, 0x0L
    };

    // A lookup table for black pawn move bitboards
    public static final long[] BLACK_PAWN_ATTACKS_MASKS = {
            /*
            Same as white pawn attack mask
             */
            0x0L, 0x0L, 0x0L, 0x0L,
            0x0L, 0x0L, 0x0L, 0x0L,
            0x2L, 0x5L, 0xaL, 0x14L,
            0x28L, 0x50L, 0xa0L, 0x40L,
            0x200L, 0x500L, 0xa00L, 0x1400L,
            0x2800L, 0x5000L, 0xa000L, 0x4000L,
            0x20000L, 0x50000L, 0xa0000L, 0x140000L,
            0x280000L, 0x500000L, 0xa00000L, 0x400000L,
            0x2000000L, 0x5000000L, 0xa000000L, 0x14000000L,
            0x28000000L, 0x50000000L, 0xa0000000L, 0x40000000L,
            0x200000000L, 0x500000000L, 0xa00000000L, 0x1400000000L,
            0x2800000000L, 0x5000000000L, 0xa000000000L, 0x4000000000L,
            0x20000000000L, 0x50000000000L, 0xa0000000000L, 0x140000000000L,
            0x280000000000L, 0x500000000000L, 0xa00000000000L, 0x400000000000L,
            0x2000000000000L, 0x5000000000000L, 0xa000000000000L, 0x14000000000000L,
            0x28000000000000L, 0x50000000000000L, 0xa0000000000000L, 0x40000000000000L
    };


    //                          ROMBA SUSS AHH IRUKE ...
    // Bishop attack mask
    public static final long[] BISHOP_ATTACK_MASKS = {
            /*
            Same convention as pawn
             */
            0x8040201008040200L, 0x80402010080500L, 0x804020110a00L, 0x8041221400L,
            0x182442800L, 0x10204885000L, 0x102040810a000L, 0x102040810204000L,
            0x4020100804020002L, 0x8040201008050005L, 0x804020110a000aL, 0x804122140014L,
            0x18244280028L, 0x1020488500050L, 0x102040810a000a0L, 0x204081020400040L,
            0x2010080402000204L, 0x4020100805000508L, 0x804020110a000a11L, 0x80412214001422L,
            0x1824428002844L, 0x102048850005088L, 0x2040810a000a010L, 0x408102040004020L,
            0x1008040200020408L, 0x2010080500050810L, 0x4020110a000a1120L, 0x8041221400142241L,
            0x182442800284482L, 0x204885000508804L, 0x40810a000a01008L, 0x810204000402010L,
            0x804020002040810L, 0x1008050005081020L, 0x20110a000a112040L, 0x4122140014224180L,
            0x8244280028448201L, 0x488500050880402L, 0x810a000a0100804L, 0x1020400040201008L,
            0x402000204081020L, 0x805000508102040L, 0x110a000a11204080L, 0x2214001422418000L,
            0x4428002844820100L, 0x8850005088040201L, 0x10a000a010080402L, 0x2040004020100804L,
            0x200020408102040L, 0x500050810204080L, 0xa000a1120408000L, 0x1400142241800000L,
            0x2800284482010000L, 0x5000508804020100L, 0xa000a01008040201L, 0x4000402010080402L,
            0x2040810204080L, 0x5081020408000L, 0xa112040800000L, 0x14224180000000L,
            0x28448201000000L, 0x50880402010000L, 0xa0100804020100L, 0x40201008040201L
    };

    // Rook attack mask
    public static final long[] ROOK_ATTACK_MASKS = {
            /*
            same convention as pawn
             */
            0x1010101010101feL, 0x2020202020202fdL, 0x4040404040404fbL, 0x8080808080808f7L,
            0x10101010101010efL, 0x20202020202020dfL, 0x40404040404040bfL, 0x808080808080807fL,
            0x10101010101fe01L, 0x20202020202fd02L, 0x40404040404fb04L, 0x80808080808f708L,
            0x101010101010ef10L, 0x202020202020df20L, 0x404040404040bf40L, 0x8080808080807f80L,
            0x101010101fe0101L, 0x202020202fd0202L, 0x404040404fb0404L, 0x808080808f70808L,
            0x1010101010ef1010L, 0x2020202020df2020L, 0x4040404040bf4040L, 0x80808080807f8080L,
            0x1010101fe010101L, 0x2020202fd020202L, 0x4040404fb040404L, 0x8080808f7080808L,
            0x10101010ef101010L, 0x20202020df202020L, 0x40404040bf404040L, 0x808080807f808080L,
            0x10101fe01010101L, 0x20202fd02020202L, 0x40404fb04040404L, 0x80808f708080808L,
            0x101010ef10101010L, 0x202020df20202020L, 0x404040bf40404040L, 0x8080807f80808080L,
            0x101fe0101010101L, 0x202fd0202020202L, 0x404fb0404040404L, 0x808f70808080808L,
            0x1010ef1010101010L, 0x2020df2020202020L, 0x4040bf4040404040L, 0x80807f8080808080L,
            0x1fe010101010101L, 0x2fd020202020202L, 0x4fb040404040404L, 0x8f7080808080808L,
            0x10ef101010101010L, 0x20df202020202020L, 0x40bf404040404040L, 0x807f808080808080L,
            0xfe01010101010101L, 0xfd02020202020202L, 0xfb04040404040404L, 0xf708080808080808L,
            0xef10101010101010L, 0xdf20202020202020L, 0xbf40404040404040L, 0x7f80808080808080L
    };

    public static final long[] WHITE_PAWN_NORMAL_MOVE_MASKS = {
            /*
            Same convention as pawn attack masks
             */
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000000001010000L, 0x0000000002020000L, 0x0000000004040000L, 0x0000000008080000L,
            0x0000000010100000L, 0x0000000020200000L, 0x0000000040400000L, 0x0000000080800000L,
            0x0000000001000000L, 0x0000000002000000L, 0x0000000004000000L, 0x0000000008000000L,
            0x0000000010000000L, 0x0000000020000000L, 0x0000000040000000L, 0x0000000080000000L,
            0x0000000100000000L, 0x0000000200000000L, 0x0000000400000000L, 0x0000000800000000L,
            0x0000001000000000L, 0x0000002000000000L, 0x0000004000000000L, 0x0000008000000000L,
            0x0000010000000000L, 0x0000020000000000L, 0x0000040000000000L, 0x0000080000000000L,
            0x0000100000000000L, 0x0000200000000000L, 0x0000400000000000L, 0x0000800000000000L,
            0x0001000000000000L, 0x0002000000000000L, 0x0004000000000000L, 0x0008000000000000L,
            0x0010000000000000L, 0x0020000000000000L, 0x0040000000000000L, 0x0080000000000000L,
            0x0100000000000000L, 0x0200000000000000L, 0x0400000000000000L, 0x0800000000000000L,
            0x1000000000000000L, 0x2000000000000000L, 0x4000000000000000L, 0x8000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L
    };

    // A lookup table for black pawn move bitboards
    public static final long[] BLACK_PAWN_NORMAL_MOVE_MASKS = {
            /*
            Same as pawn attack masks
             */
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000000000000001L, 0x0000000000000002L, 0x0000000000000004L, 0x0000000000000008L,
            0x0000000000000010L, 0x0000000000000020L, 0x0000000000000040L, 0x0000000000000080L,
            0x0000000000000100L, 0x0000000000000200L, 0x0000000000000400L, 0x0000000000000800L,
            0x0000000000001000L, 0x0000000000002000L, 0x0000000000004000L, 0x0000000000008000L,
            0x0000000000010000L, 0x0000000000020000L, 0x0000000000040000L, 0x0000000000080000L,
            0x0000000000100000L, 0x0000000000200000L, 0x0000000000400000L, 0x0000000000800000L,
            0x0000000001000000L, 0x0000000002000000L, 0x0000000004000000L, 0x0000000008000000L,
            0x0000000010000000L, 0x0000000020000000L, 0x0000000040000000L, 0x0000000080000000L,
            0x0000000100000000L, 0x0000000200000000L, 0x0000000400000000L, 0x0000000800000000L,
            0x0000001000000000L, 0x0000002000000000L, 0x0000004000000000L, 0x0000008000000000L,
            0x0000010100000000L, 0x0000020200000000L, 0x0000040400000000L, 0x0000080800000000L,
            0x0000101000000000L, 0x0000202000000000L, 0x0000404000000000L, 0x0000808000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L
    };

    public static long getPawnNormalMoves(boolean colour, int boxNo){
        if(colour)
            return BLACK_PAWN_NORMAL_MOVE_MASKS[boxNo];

        else
            return WHITE_PAWN_NORMAL_MOVE_MASKS[boxNo];

    }

    public  static final long[] BOX_MASKS = {
            0x1L, 0x2L, 0x4L, 0x8L, 0x10L, 0x20L, 0x40L, 0x80L,
            0x100L, 0x200L, 0x400L, 0x800L, 0x1000L, 0x2000L, 0x4000L, 0x8000L,
            0x10000L, 0x20000L, 0x40000L, 0x80000L, 0x100000L, 0x200000L, 0x400000L, 0x800000L,
            0x1000000L, 0x2000000L, 0x4000000L, 0x8000000L, 0x10000000L, 0x20000000L, 0x40000000L, 0x80000000L,
            0x100000000L, 0x200000000L, 0x400000000L, 0x800000000L, 0x1000000000L, 0x2000000000L, 0x4000000000L, 0x8000000000L,
            0x10000000000L, 0x20000000000L, 0x40000000000L, 0x80000000000L, 0x100000000000L, 0x200000000000L, 0x400000000000L, 0x800000000000L,
            0x1000000000000L, 0x2000000000000L, 0x4000000000000L, 0x8000000000000L, 0x10000000000000L, 0x20000000000000L, 0x40000000000000L, 0x80000000000000L,
            0x100000000000000L, 0x200000000000000L, 0x400000000000000L, 0x800000000000000L, 0x1000000000000000L, 0x2000000000000000L, 0x4000000000000000L, 0x8000000000000000L
    };

    public static long getPawnAttackMoves(boolean colour, int boxNo){
        if(colour)
            return BLACK_PAWN_ATTACKS_MASKS[boxNo];
        else
            return WHITE_PAWN_ATTACKS_MASKS[boxNo];
    }


    // Private constructor to prevent instantiation
    private AttackMasks() {}
}



